// Generated by CoffeeScript 1.6.2
(function() {
  var Crypto, Express, Faye, Http, Https, Path, Redis, app, bayeux, faye, gravatarEmailHash, joinChat, redis, server;

  Express = require('express');

  Http = require('http');

  Https = require('https');

  Path = require('path');

  Faye = require('faye');

  Crypto = require('crypto');

  Redis = require('redis');

  redis = Redis.createClient();

  redis.select(10);

  bayeux = new Faye.NodeAdapter({
    mount: '/faye',
    timeout: 45
  });

  faye = bayeux.getClient();

  app = Express();

  app.set('port', process.env.PORT || 3000);

  app.set('views', __dirname + '/views');

  app.set('view engine', 'ejs');

  app.use(Express.favicon());

  app.use(Express.logger('dev'));

  app.use(Express.bodyParser());

  app.use(Express.methodOverride());

  app.use(Express.cookieParser('your secret here'));

  app.use(Express.session());

  app.use(app.router);

  app.use(require('less-middleware')({
    src: __dirname + '/public'
  }));

  app.use(Express["static"](Path.join(__dirname, 'public')));

  if ('development' === app.get('env')) {
    app.use(Express.errorHandler());
  }

  /* Helpers
  */


  gravatarEmailHash = function(email) {
    return Crypto.createHash('md5').update(email.toLowerCase().trim()).digest('hex');
  };

  joinChat = function(email, room) {
    var get, gravatarHash, options, output;

    gravatarHash = gravatarEmailHash(email);
    options = {
      host: "secure.gravatar.com",
      port: 443,
      path: "/" + gravatarHash + ".json"
    };
    output = "";
    get = Https.get(options, function(response) {
      response.setEncoding('utf8');
      response.on("data", function(chunk) {
        return output += chunk;
      });
      return response.on("end", function() {
        var gravatar_profile, location, name, payload;

        if (response.statusCode === 404) {
          payload = {
            name: "Anonymous",
            email: email,
            location: "Unknown",
            gravatar: gravatarHash
          };
        } else {
          gravatar_profile = JSON.parse(output).entry[0];
          location = gravatar_profile.currentLocation || 'Unknown';
          if (gravatar_profile.name) {
            name = gravatar_profile.name.formatted;
          } else {
            name = gravatar_profile.displayName;
          }
          payload = {
            name: name,
            email: email,
            location: location,
            gravatar: gravatarHash
          };
        }
        redis.sadd("people:" + room, JSON.stringify(payload));
        redis.sadd("rooms", room);
        return faye.publish("/people/" + room, payload);
      });
    });
    get.on("error", function(error) {
      return console.log("Error retrieving Gravatar profile: " + error.message);
    });
    return get.end();
  };

  /* Routes
  */


  app.get('/', function(request, response) {
    return redis.smembers("rooms", function(error, rooms) {
      return response.render('index', {
        rooms: rooms
      });
    });
  });

  app.post('/chat', function(request, response) {
    var email, room;

    email = request.body.email;
    room = request.body.room;
    joinChat(email, room);
    return redis.lrange("chat:" + room, 0, -1, function(error, messages) {
      return redis.smembers("people:" + room, function(error, people) {
        return response.render('chat', {
          email: email,
          room: room,
          messages: messages,
          people: people
        });
      });
    });
  });

  app.post('/message', function(request, response) {
    var body, email, payload, room;

    email = request.body.email;
    body = request.body.body;
    room = request.body.room;
    payload = {
      email: email,
      body: body,
      gravatar: gravatarEmailHash(email),
      timestamp: new Date().toString()
    };
    redis.lpush("chat:" + room, JSON.stringify(payload));
    faye.publish("/chat-messages/" + room, payload);
    return response.send(201);
  });

  /* Server Configuration
  */


  server = Http.createServer(app);

  bayeux.attach(server);

  server.listen(app.get('port'), function() {
    return console.log("Express server listening on port " + (app.get('port')));
  });

}).call(this);
